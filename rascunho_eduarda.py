from bokeh.io import output_file, show
from bokeh.models import ColumnDataSource
from bokeh.plotting import figure
import pandas as pd
'''
#1: GRÁFICO DE BARRAS DE GERAÇÃO DE ELETRICIDADE A PARTIR DO VENTO POR PAÍS (MEDIDDO EM TERAWATT-HORA)

# Leitura do arquivo CSV
data = pd.read_csv("World Energy Consumption.csv")

# Filtrar os dados para o ano de 2020
df_filtered = data[data['year'] == 2020]

# Ordenar os valores da coluna 'wind_electricity' em ordem decrescente
df_sorted = df_filtered.sort_values('wind_electricity', ascending=False)

# Selecionar os 10 maiores valores da coluna 'wind_electricity'
df_top_10 = df_sorted.head(10)

# Selecionar apenas as colunas desejadas ('country' e 'wind_electricity')
df_top_10_filtered = df_top_10[['country', 'wind_electricity']]

# Identificar o país com o maior valor de wind_electricity
pais_maior_geracao = df_top_10_filtered[df_top_10_filtered['wind_electricity'] == df_top_10_filtered['wind_electricity'].max()]['country'].iloc[0]

# Excluir o país com o maior valor de wind_electricity
df_top_10_filtered = df_top_10_filtered[df_top_10_filtered['country'] != pais_maior_geracao]

# Criar um ColumnDataSource com os dados organizados
data_organized = ColumnDataSource(df_top_10_filtered)

# Configurar a saída para um arquivo HTML
output_file("grafico_barras.html")

# Criar a figura
p = figure(x_range=df_top_10_filtered['country'], height=600, width=800, title="Geração de Eletricidade a partir do Vento por País")

# Plotar as barras
p.vbar(x='country', top='wind_electricity', width=0.9, source=data_organized)

# Configurar rótulos e títulos dos eixos
p.xaxis.axis_label = "País"
p.yaxis.axis_label = "Geração de Eletricidade (TWh)"

# Exibir o gráfico
show(p)


#2: GRÁFICO DE LINHA CONSUMO PER CAPITA DE ELETRICIDADE DO VENTO( MEDIDA EM kWh)

# Leitura do arquivo CSV
data = pd.read_csv("World Energy Consumption.csv")

# Filtragem de dados para o país "Brazil" nos últimos 50 anos:
df_filtered_country = data[(data['country'] == 'Brazil') & (data['year'] >= (data['year'].max() - 50))]

# Criando o ColumnDataSource com os dados
source = ColumnDataSource(df_filtered_country)

# Configurando a saída para um arquivo HTML:
output_file("line_chart.html") 

# Criando uma figura:
p = figure(title="PER CAPITA CONSUMPTION OF ELECTRICITY GENERATED BY WIND IN BRAZIL IN THE LAST 50 YEARS",
           x_axis_label='Ano', y_axis_label='Energia Eólica per Capita', width=1200, height=600)

# Plotando o gráfico de linha:
p.line('year', 'wind_energy_per_capita', line_width=4, source=source)

# Alterando o tamanho e a cor da linha:
p.line('year', 'wind_energy_per_capita', line_width=2, line_color="#0C3B40", source=source)

p.title.text_font = "Georgia"  # Altera a fonte do título para Georgia
p.title.text_font_size = "14pt"  # Altera o tamanho da fonte do título para 14 pontos
p.title.text_color = "#0C3B40"  # Altera a cor do texto do título para vermelho
p.title.text_align = "center"  # Alinhando o título no centro do gráfico

p.xaxis.axis_label_text_font = "Georgia"  # Altera a fonte do rótulo do eixo x para Georgia
p.xaxis.axis_label_text_font_size = "14pt"  # Altera o tamanho da fonte do rótulo do eixo x para 12 pontos
p.xaxis.axis_label_text_color = "#0C3B40"  # Altera a cor do texto do rótulo do eixo x para azul

p.yaxis.axis_label_text_font = "Georgia"  # Altera a fonte do rótulo do eixo y para Georgia
p.yaxis.axis_label_text_font_size = "14pt"  # Altera o tamanho da fonte do rótulo do eixo y para 10 pontos
p.yaxis.axis_label_text_color = "#0C3B40"  # Altera a cor do texto do rótulo do eixo y para verde

p.background_fill_color = "#38ABF2"  # Altera a cor de fundo do gráfico 

# Mostrando o gráfico:
show(p)


#GRÁFICO 3: VARIAÇÃO PERCENTUAL ANUAL NO CONSUMO DE VENTO, COMPARAÇÃO ENTRE BRASIL E ARGENTINA

data = pd.read_csv("World Energy Consumption.csv")

# Filtragem de dados para o Brasil
df_brazil = data[data['country'] == 'Brazil']

# Filtragem de dados para a Argentina
df_argentina = data[data['country'] == 'Argentina']

#Crie a figura para o gráfico:
p = figure(title="Variação percentual anual no consumo de vento", x_axis_label='Ano', y_axis_label='Energia Eólica per Capita',
           width=1200, height=600)

#Plote os gráficos de linha para cada país:
p.line(df_brazil['year'], df_brazil['wind_cons_change_pct'], line_width=2, color='blue', legend_label='Brasil')
p.line(df_argentina['year'], df_argentina['wind_cons_change_pct'], line_width=2, color='red', legend_label='Argentina')

#Ajuste a legenda para mostrar os nomes dos países:
p.legend.location = "top_left"
p.legend.title = "Países"

#Configure a saída para um arquivo HTML e mostre o gráfico:
output_file("line_chart2.html")
show(p)


#GRÁFICO 4: DISPERSÃO (muito legal n )

# Leitura do arquivo CSV
data = pd.read_csv("World Energy Consumption.csv")

#Filtrar os dados para o ano de 2000
df_filtered_year = data[data['year'] == 2000]
# Criar a figura
p = figure(height=400, width=600, title="Relação entre Wind Elec per Capita e Wind Energy per Capita")

# Plotar o gráfico de dispersão
p.scatter(x='wind_elec_per_capita', y='wind_energy_per_capita', source=df_filtered_year)

# Configurar rótulos e títulos dos eixos
p.xaxis.axis_label = "Wind Elec per Capita"
p.yaxis.axis_label = "Wind Energy per Capita"

# Configurar a saída para um arquivo HTML
output_file("scatter_plot.html")

# Exibir o gráfico
show(p)

'''
from bokeh.models import ColumnDataSource, Whisker
from bokeh.plotting import figure, show
from bokeh.sampledata.autompg2 import autompg2 as df
from bokeh.transform import factor_cmap, jitter

data = pd.read_csv("World Energy Consumption.csv")
# Ordenar os valores da coluna 'population' em ordem decrescente e selecionar os 5 maiores países
df_top_5 = data.sort_values('population', ascending=False).head(5)

# Criar a figura
p = figure(height=400, x_range=df_top_5['country'], background_fill_color="#efefef",
           title="Países com Maior População e Renda Per Capita")

# Configurar a fonte de dados
source = ColumnDataSource(df_top_5)

# Plotar os círculos com jitter nos valores de 'gdp' e 'population'
p.circle(jitter("country", 0.3, range=p.x_range), "gdp", source=source,
         alpha=0.5, size=13, line_color="white",
         color=factor_cmap("country", "Category10_5", df_top_5['country']))

# Configurar rótulos e títulos dos eixos
p.xaxis.axis_label = "Países"
p.yaxis.axis_label = "Renda Per Capita"

# Exibir o gráfico
show(p)